{"version":3,"sources":["../src/datasource.js"],"names":["_","GenericDatasource","instanceSettings","$q","backendSrv","templateSrv","type","annotations","url","name","severityLevels","jsonData","severity","critical","toLowerCase","high","medium","low","test","ciaas","q","options","query","buildQueryParameters","targets","filter","t","hide","length","when","data","encodeURIComponent","replace","expr","scopedVars","datasourceRequest","method","headers","then","results","i","response","item","text","labels","rows","push","Date","parse","startsAt","formatInstanceText","legendFormat","alertname","now","status","message","title","target","map","refId","JSON","stringify","aliasRegex","match","g1"],"mappings":"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","file":"datasource.js","sourcesContent":["import _ from \"lodash\";\n\nexport class GenericDatasource {\n\n  constructor(instanceSettings, $q, backendSrv, templateSrv) {\n    this.type = instanceSettings.type;\n    this.annotations = instanceSettings.annotations;\n    this.url = instanceSettings.url;\n    this.name = instanceSettings.name;\n    this.severityLevels = {};\n    this.severityLevels[instanceSettings.jsonData.severity.critical.toLowerCase()] = 6;\n    this.severityLevels[instanceSettings.jsonData.severity.high.toLowerCase()] = 5;\n    this.severityLevels[instanceSettings.jsonData.severity.medium.toLowerCase()] = 4;\n    this.severityLevels[instanceSettings.jsonData.severity.low.toLowerCase()] = 3;\n    this.severityLevels[instanceSettings.jsonData.severity.test.toLowerCase()] = 2;\n    this.severityLevels[instanceSettings.jsonData.severity.ciaas.toLowerCase()] = 1;\n    this.q = $q;\n    this.backendSrv = backendSrv;\n    this.templateSrv = templateSrv;\n  }\n\n  query(options) {\n    var query = this.buildQueryParameters(options);\n    query.targets = query.targets.filter(t => !t.hide);\n\n    if (query.targets.length <= 0) {\n      return this.q.when({data: []});\n    }\n    // Format data for table panel\n    if(query.targets[0].type == \"table\"){\n      var filter = encodeURIComponent(this.templateSrv.replace(query.targets[0].expr, options.scopedVars) || \"\");\n      return this.backendSrv.datasourceRequest({\n        url: this.url + '/api/v1/alerts?silenced=false&inhibited=false&filter='+filter,\n        data: query,\n        method: 'GET',\n        headers: { 'Content-Type': 'application/json' }\n      }).then(response => {\n        var results = {\n          \"data\": [\n            {\n              \"columns\":[\n                {\"text\": \"Time\", \"type\": \"time\"},\n                {\"text\": \"Message\", \"type\": \"string\"},\n                {\"text\": \"Alertname\", \"type\": \"string\"},\n                {\"text\": \"Severity\", \"type\": \"string\"}\n              ],\n              \"rows\": [],\n              \"type\": \"table\"\n            }\n          ]\n        };\n        for(var i=0;i<response.data.data.length;i++){\n          var item = response.data.data[i];\n          if (query.targets[0].annotations) {\n            var text = item.annotations;\n          } else {\n            var text = item.labels;\n          }\n          results.data[0].rows.push([\n            Date.parse(item.startsAt),\n            this.formatInstanceText(text, query.targets[0].legendFormat),\n            item.labels.alertname,\n            this.severityLevels[item.labels.severity]\n          ]);\n        };\n        return results;\n      });\n    }else{\n      var filter = encodeURIComponent(this.templateSrv.replace(query.targets[0].expr, options.scopedVars) || \"\");\n      return this.backendSrv.datasourceRequest({\n        url: this.url + '/api/v1/alerts?silenced=false&inhibited=false&filter='+filter,\n        data: query,\n        method: 'GET',\n        headers: { 'Content-Type': 'application/json' }\n      }).then(response => {\n        return {\n          \"data\": [\n            {\n              \"datapoints\": [\n                [response.data.data.length, Date.now()]\n              ]\n            }\n          ]\n        }\n      });\n    }\n  }\n\n  testDatasource() {\n    return this.backendSrv.datasourceRequest({\n      url: this.url + '/api/v1/status',\n      method: 'GET'\n    }).then(response => {\n      if (response.status === 200) {\n        return { status: \"success\", message: \"Data source is working\", title: \"Success\" };\n      }\n    });\n  }\n\n  buildQueryParameters(options) {\n    //remove placeholder targets\n      options.targets = _.filter(options.targets, target => {\n      return target.target !== 'select metric';\n    });\n    var targets = _.map(options.targets, target => {\n      return {\n        target: this.templateSrv.replace(target.target),\n        expr: target.expr,\n        refId: target.refId,\n        hide: target.hide,\n        type: target.type || 'single',\n        annotations: target.annotations || false,\n        legendFormat: target.legendFormat || \"\"\n      };\n    });\n    options.targets = targets;\n    return options;\n  }\n\n  formatInstanceText(labels, legendFormat){\n    if(legendFormat == \"\"){\n      return JSON.stringify(labels);\n    }\n    var aliasRegex = /\\{\\{\\s*(.+?)\\s*\\}\\}/g;\n    var text = legendFormat.replace(aliasRegex, function(match, g1) {\n      if (labels[g1]) {\n        return labels[g1];\n      }\n      return \"\";\n    });\n    return text;\n  }\n}\n"]}